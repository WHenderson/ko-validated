!function(e,r){"function"==typeof define&&define.amd?define([],r):e.applyKov=r()}(this,function(){var e,r={}.hasOwnProperty;return e=function(e){return e.extenders.fallible=function(n,o){var t,s,i,l,u,f;return o===!1?("function"==typeof n._disposeFallible&&n._disposeFallible(),n):e.extenders.fallible.isFallible(n)?n:(i=e.observable({}),u=0,l={}.hasOwnProperty,f=function(e){var r;r=i(),l.call(r,e)&&(delete r[e],i.valueHasMutated())},t=function(e){return l.call(i(),e)},s=function(e,r,o){var s;return null!=r?(s={message:o,target:n,dispose:function(){return f(r)},isDisposed:function(){return!t(r)}},e[r]=o):s={message:o,target:n,dispose:function(){},isDisposed:function(){return!0}},s},n.errors=e.pureComputed({read:function(){var e,n,o,t,s;t=[],e=function(r){var n,o,s;if(null!=r)if("function"==typeof r)r=r(),e(r);else if(Array.isArray(r))for(n=0,o=r.length;o>n;n++)s=r[n],e(s);else"string"==typeof r||"object"==typeof r?t.push(r):"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(!1,"invalid error message")},s=i();for(n in s)r.call(s,n)&&(o=s[n],e(o));return t},write:function(e){n.errors.set(e)}}),n.errors.add=function(e){var r,n;return null!=e&&(r=++u),n=s(i(),r,e),i.valueHasMutated(),n},n.errors.get=function(){var e,n,o,t,s;n=void 0,e=function(r){var o,t,s;if(null==r)return!1;if("function"==typeof r){if(r=r(),e(r))return!0}else if(Array.isArray(r)){for(o=0,t=r.length;t>o;o++)if(s=r[o],e(s))return!0}else{if("string"==typeof r||"object"==typeof r)return n=r,!0;"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(!1,"invalid error message")}return!1},s=i();for(o in s)if(r.call(s,o)&&(t=s[o],e(t)))return n},n.errors.set=function(e){var r,n,o;return null!=e&&(n=++u),r={},o=s(r,n,e),i(r),o},n.errors.has=function(){return null!=n.error()},n.errors.clear=function(){i({})},n.error=e.pureComputed({read:n.errors.get,write:n.errors.set}),n.hasError=e.pureComputed({read:n.errors.has}),n._disposeFallible=function(){i({}),delete n.error,delete n.errors,delete n.hasError,delete n._disposeFallible},n)},e.extenders.fallible.isFallible=function(e){return null!=e.errors&&null!=e.error},e.pureErrors=function(r,n){var o,t;return t=void 0,o=e.pureComputed(function(){var e,s,i;i=[],e=function(e,r){null!=e?(e=e.extend({fallible:!0}),i.push(e.errors.add(r))):i.push({message:r,dispose:function(){},isDisposed:function(){return!0}})},s=function(){var e,r,n;for(r=0,n=i.length;n>r;r++)e=i[r],e.dispose();i=[],t.dispose(),t=void 0};try{r.call(n,e)}finally{t=o.subscribe(s,null,"asleep")}return i})},e}});
//# sourceMappingURL=data:application/json;base64,
