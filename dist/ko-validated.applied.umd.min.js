!function(e,r){"function"==typeof define&&define.amd?define(["knockout"],r):"object"==typeof exports?module.exports=r(require("knockout")):e.ko=r(e.ko)}(this,function(e){var r,n={}.hasOwnProperty;return r=function(e){var r,t,o,i;return e.validated={},r=function(){function e(e,r,n,t,o){this.name=e,this.message=r,this.target=n,null!=t&&(this.dispose=t),null!=o&&(this.isDisposed=o)}return e.prototype.dispose=function(){},e.prototype.isDisposed=function(){return!0},e}(),t=0,i=function(){return++t},e.extenders.fallible=function(t,o){var l,s,u,f,a,c;return o===!1?("function"==typeof t._disposeFallible&&t._disposeFallible(),t):e.extenders.fallible.isFallible(t)?t:(s=e.observable({}),f={},u={}.hasOwnProperty,c=function(e,r){var n,t;"string"==typeof e&&({}.hasOwnProperty(f,e)?(t=e,e=f[e],delete f[t]):e=void 0),null!=e&&(n=s(),u.call(n,e)&&(delete n[e],r!==!1&&s.valueHasMutated()))},l=function(e){return u.call(s(),e)},a=function(e,n,o,u){var a,d;return null!=n?(d=i(),a=new r(o,n,t,function(){return c(null!=o?o:d)},function(){return!l(d)}),"string"==typeof o&&({}.hasOwnProperty.call(f,o)&&c(f[o],!1),f[o]=d),e[d]=n,u!==!1&&s.valueHasMutated()):(a=new r(o,n,t),c(o,u)),a},t.errors=e.pureComputed({read:function(){var e,r,t,o,i;o=[],e=function(r){var n,t,i;if(null!=r)if("function"==typeof r)r=r(),e(r);else if(Array.isArray(r))for(n=0,t=r.length;t>n;n++)i=r[n],e(i);else"string"==typeof r||"object"==typeof r?o.push(r):"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(!1,"invalid error message")},i=s();for(r in i)n.call(i,r)&&(t=i[r],e(t));return o},write:function(e){t.errors.set(e)}}),t.errors.add=function(e,r){return 1===arguments.length&&(r=e,e=void 0),a(s(),r,e,!0)},t.errors.set=function(e,r){var n,t;return 1===arguments.length&&(r=e,e=void 0),t={},f={},n=a(t,r,e,!1),s(t),n},t.errors.get=function(e){var r,t,o,i,l;if(t=void 0,r=function(e){var n,o,i;if(null==e)return!1;if("function"==typeof e){if(e=e(),r(e))return!0}else if(Array.isArray(e)){for(n=0,o=e.length;o>n;n++)if(i=e[n],r(i))return!0}else{if("string"==typeof e||"object"==typeof e)return t=e,!0;"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(!1,"invalid error message")}return!1},"string"==typeof e){if({}.hasOwnProperty.call(f,e)&&r(s()[f[e]]))return t}else{l=s();for(o in l)if(n.call(l,o)&&(i=l[o],r(i)))return t}},t.errors.has=function(e){return null!=t.errors.get(e)},t.errors.remove=function(e){"string"==typeof e&&c(e)},t.errors.clear=function(){f={},s({})},t.error=e.pureComputed({read:t.errors.get,write:t.errors.set}),t.hasError=e.pureComputed({read:t.errors.has}),t._disposeFallible=function(){s({}),delete t.error,delete t.errors,delete t.hasError,delete t._disposeFallible},t)},e.extenders.fallible.isFallible=function(e){return null!=e.errors&&null!=e.error},o=function(){var r,t;return t=function(){var r,n,t,o,i;if(r=e.computed(function(){}),null!=Object.getOwnPropertySymbols)for(o=Object.getOwnPropertySymbols(r),n=0,t=o.length;t>n;n++)if(i=o[n],"Symbol(_state)"===String(i))return i;return{}.hasOwnProperty.call(r,"_state")?"_state":void 0}(),r=function(){var r,o,i,l,s;i=e.observable(),r=e.computed({read:function(){return i()}}),l=r[t];for(o in l)if(n.call(l,o)&&(s=l[o],null!=s&&"object"==typeof s))return o}(),function(n){return e.isComputed(n)?n[t][r]:{}}}(),e.extenders.fallibleRead=function(r,t){var i,l,s;return e.isComputed(r)?(r.extend({fallible:!0}),t===!1?void("function"==typeof r._disposeFallibleRead&&r._disposeFallibleRead()):(s=function(r,t){var i,l,u;u=o(t);for(l in u)n.call(u,l)&&(i=u[l],i=i._target,e.extenders.fallible.isFallible(i)&&-1===r.indexOf(i.errors)&&r.push(i.errors),e.isComputed(i)&&s(r,i));return r},l=function(){try{return s([],r)}finally{}},i=r.errors.add(l),r._disposeFallibleRead=function(){null!=i&&(i.dispose(),i=void 0)},r)):r},e},r(e),e});
//# sourceMappingURL=data:application/json;base64,
